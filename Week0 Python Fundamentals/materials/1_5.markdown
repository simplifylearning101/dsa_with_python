# Hour 1 Deep Dive: Mastering Python Basics for Interviews

This section dives deeper for serious students. We'll explore nuances, common interview questions on basics, and why interviewers ask them.

## Complex Topics and Programs
- **Dynamic Typing Pitfalls**: Python's flexibility can lead to runtime errors. Always check types in complex code.

Complex Program: Type Checker Function
```python
# Function to check and handle different types
def process_data(data):
    if isinstance(data, int):  # Check if int
        return data * 2  # Double it
    elif isinstance(data, float):  # Check float
        return data + 1.0  # Add 1
    elif isinstance(data, str):  # Check string
        return data.upper()  # Uppercase
    else:
        return "Unknown type"  # Handle others

# Test
print(process_data(5))  # 10
print(process_data(3.14))  # 4.14
print(process_data("hello"))  # HELLO
```
This shows type checking with isinstance()â€”useful in interviews for robust code.

## Interview Questions and Answers
1. **Explain Python's memory management for variables.**  
   Answer: Python uses reference counting and garbage collection. Variables point to objects; when reassigned, old object may be garbage collected if no references. Interviewer intent: Test understanding of internals, potential memory leaks.

2. **What is the difference between = and ==?**  
   Answer: = assigns, == compares. e.g., x = 5 (assign), if x == 5 (check). Intent: Basic syntax, common beginner mistake.

3. **How does Python handle large integers?**  
   Answer: Unlimited precision for int (no overflow like in C). e.g., 10**1000 works. Intent: Awareness of Python's advantages in math problems.

4. **Why use str() when printing mixed types?**  
   Answer: To concatenate; print(5 + " is five") errors, but print(str(5) + " is five") works. Intent: Type compatibility in output.

5. **Discuss bool as subclass of int.**  
   Answer: True == 1, False == 0. e.g., True + True = 2. Intent: Tricky behaviors in conditions or sums.

More questions: Explain NoneType, mutable vs immutable (intro, as types like int are immutable).

Complex Program 2: Variable Swap without Temp
```python
# Swap two variables without temp
a = 10
b = 20
a, b = b, a  # Python tuple packing
print(a, b)  # 20 10
```
Intent: Show Python's elegance.