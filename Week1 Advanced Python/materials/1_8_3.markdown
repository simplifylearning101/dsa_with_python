# Solutions to Week 1, Hour 8 Homework Problems

Solutions with extensively commented code for clarity.

**Problem 1**:
```python
# Square numbers using lambda and map
def square_list(nums):
    # Apply lambda to square each number
    return list(map(lambda x: x * x, nums))

# Test the function
print(square_list([1, 2, 3]))  # Output: [1, 4, 9]
```

**Problem 2**:
```python
# Filter odd numbers
def filter_odds(nums):
    # Filter numbers where x % 2 == 1
    return list(filter(lambda x: x % 2 == 1, nums))

# Test the function
print(filter_odds([1, 2, 3, 4]))  # Output: [1, 3]
```

**Problem 3**:
```python
from functools import reduce

# Compute product using reduce
def product(nums):
    # Multiply all numbers
    return reduce(lambda x, y: x * y, nums, 1)

# Test the function
print(product([1, 2, 3]))  # Output: 6
```

**Problem 4**:
```python
# List comprehension for evens
def get_evens(n):
    # Select even numbers from range
    return [x for x in range(n) if x % 2 == 0]

# Test the function
print(get_evens(5))  # Output: [0, 2, 4]
```

**Problem 5**:
```python
# Generator for squares
def squares(n):
    # Yield square of each number
    for i in range(n):
        yield i * i

# Test the function
print(list(squares(4)))  # Output: [0, 1, 4, 9]
```

**Problem 6**:
```python
import time

# Decorator to time execution
def timer(func):
    # Wrapper function
    def wrapper(*args, **kwargs):
        # Record start time
        start = time.time()
        # Call function
        result = func(*args, **kwargs)
        # Compute duration
        duration = time.time() - start
        print(f"{func.__name__} took {duration:.2f} seconds")
        return result
    return wrapper

# Test function
@timer
def sleep_one():
    time.sleep(1)

# Test the function
sleep_one()  # Output: sleep_one took ~1.00 seconds
```

**Problem 7**:
```python
# Sort tuples by second element
def sort_tuples(tuples):
    # Sort using lambda on second element
    return sorted(tuples, key=lambda x: x[1])

# Test the function
print(sort_tuples([(1, 3), (2, 1)]))  # Output: [(2, 1), (1, 3)]
```

**Problem 8**:
```python
# Fibonacci using generator expression
def fib_gen(n):
    # Initialize Fibonacci sequence
    def fib(i):
        if i <= 1:
            return i
        a, b = 0, 1
        for _ in range(i):
            a, b = b, a + b
        return a
    # Generator expression
    return (fib(i) for i in range(n))

# Test the function
print(list(fib_gen(5)))  # Output: [0, 1, 1, 2, 3]
```

**Problem 9**:
```python
# Filter strings longer than 3
def filter_long_strings(strings):
    # Filter strings with len > 3
    return list(filter(lambda s: len(s) > 3, strings))

# Test the function
print(filter_long_strings(["cat", "dog", "horse"]))  # Output: ["horse"]
```

**Problem 10**:
```python
# Decorator to check positive inputs
def positive_check(func):
    # Wrapper function
    def wrapper(*args, **kwargs):
        # Check all positional args
        for arg in args:
            if arg < 0:
                raise ValueError("Inputs must be non-negative")
        return func(*args, **kwargs)
    return wrapper

# Test function
@positive_check
def add(x, y):
    return x + y

# Test with try-except
try:
    print(add(2, 3))  # Output: 5
    print(add(-1, 2))  # Raises ValueError
except ValueError as e:
    print(e)  # Output: Inputs must be non-negative
```