# Week 1, Hour 1: Advanced List Operations and List Comprehensions

## Agenda
This hour dives into advanced list operations and list comprehensions, powerful Python tools for manipulating lists efficiently. These techniques are commonly used in coding interviews to write concise, readable code and solve array-based problems effectively.

## Outcome Expected
By the end of this hour, you will be able to:
- Use advanced list methods like `sort()`, `sorted()`, `reverse()`, and `extend()`.
- Write list comprehensions for concise data manipulation.
- Handle nested list comprehensions for complex tasks.
- Apply slicing tricks for efficient list processing.
- Choose between comprehensions and loops in interview scenarios.
- Explain list operations clearly to interviewers.

## Topics Covered
1. Advanced List Methods
2. List Comprehensions: Syntax and Use Cases
3. Nested List Comprehensions
4. Advanced Slicing Techniques
5. Choosing Comprehensions vs Loops
6. Interview Tips and Common Pitfalls

## Detailed Explanation of Topics

### 1. Advanced List Methods
Lists support powerful methods for manipulation:
- `sort()`: Sorts list in-place.
- `sorted()`: Returns new sorted list.
- `reverse()`: Reverses list in-place.
- `extend()`: Adds all elements from another iterable.

Example:
```python
# List methods
numbers = [3, 1, 4]
numbers.sort()  # In-place: [1, 3, 4]
print(numbers)  # Output: [1, 3, 4]
sorted_list = sorted([5, 2, 8])  # New list: [2, 5, 8]
numbers.reverse()  # In-place: [4, 3, 1]
numbers.extend([5, 6])  # Adds: [4, 3, 1, 5, 6]
```

### 2. List Comprehensions: Syntax and Use Cases
List comprehensions provide a concise way to create lists from iterables.

Syntax: `[expression for item in iterable if condition]`

Example:
```python
# Square even numbers
numbers = [1, 2, 3, 4]
evens_squared = [x**2 for x in numbers if x % 2 == 0]
print(evens_squared)  # Output: [4, 16]
```

Use cases: Filtering, transforming, mapping data.

### 3. Nested List Comprehensions
Used for creating or processing nested lists (e.g., matrices).

Example:
```python
# Flatten a 2D list
matrix = [[1, 2], [3, 4]]
flat = [num for row in matrix for num in row]
print(flat)  # Output: [1, 2, 3, 4]
```

### 4. Advanced Slicing Techniques
Slicing `[start:end:step]` supports advanced operations:
- Negative indices: Access from end.
- Step: Skip elements or reverse.

Example:
```python
# Advanced slicing
nums = [0, 1, 2, 3, 4]
print(nums[::-1])  # Reverse: [4, 3, 2, 1, 0]
print(nums[1:4:2])  # Every second: [1, 3]
print(nums[-2:])  # Last two: [3, 4]
```

### 5. Choosing Comprehensions vs Loops
- **Comprehensions**: Concise, readable for simple transformations/filtering.
- **Loops**: Better for complex logic, side effects, or readability in interviews.

Example:
```python
# Comprehension vs loop
# Comprehension
evens = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]

# Equivalent loop
evens_loop = []
for x in range(10):
    if x % 2 == 0:
        evens_loop.append(x)
```

### 6. Interview Tips and Common Pitfalls
- **Tips**:
  - Use comprehensions to show Python fluency, but explain logic verbally.
  - Use `sorted()` for non-destructive sorting in interviews.
  - Clarify slicing steps to avoid off-by-one errors.
- **Pitfalls**:
  - Overusing comprehensions reduces readability.
  - Mutating lists during iteration (e.g., removing items).
  - Forgetting `sort()` is in-place, `sorted()` is not.
  - Incorrect slice bounds (e.g., excluding end index).

Example:
```python
# Common error: Mutating while iterating
nums = [1, 2, 3]
for n in nums:
    nums.remove(n)  # Problematic; use copy or comprehension
# Better: [x for x in nums if condition]
```

## Points to Remember
- `sort()` modifies the list; `sorted()` returns a new list.
- Comprehensions are Pythonic but prioritize clarity in interviews.
- Slicing is exclusive of the end index (e.g., `[0:2]` gets indices 0, 1).
- Negative step (`[::-1]`) reverses efficiently.
- Always test edge cases: empty lists, single elements.
- Explain why you chose comprehension vs loop in interviews.
- Common error: Forgetting to copy lists before modifying.
- Use `extend()` for merging lists, not `+` for efficiency.
- Practice verbalizing list operations for whiteboard interviews.
- Check list bounds to avoid `IndexError`.