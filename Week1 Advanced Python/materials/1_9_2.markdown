# Week 1, Hour 9 Homework: Practice Problems

Practice these 10 programs to master dynamic programming. Write each as a .py file and verify outputs.

1. **Problem**: Compute nth Fibonacci number using memoization.  
   **Outcome**: Print Fibonacci number.  
   **Example**: Input: 6 → Output: 8

2. **Problem**: Compute nth Fibonacci number using tabulation.  
   **Outcome**: Print Fibonacci number.  
   **Example**: Input: 6 → Output: 8

3. **Problem**: Count ways to climb n stairs (1 or 2 steps).  
   **Outcome**: Print number of ways.  
   **Example**: Input: 3 → Output: 3

4. **Problem**: Find minimum cost to reach nth step (costs given).  
   **Outcome**: Print minimum cost.  
   **Example**: Input: [10, 15, 20] → Output: 15

5. **Problem**: Compute longest increasing subsequence length.  
   **Outcome**: Print length.  
   **Example**: Input: [10, 9, 2, 5, 3, 7, 101, 18] → Output: 4

6. **Problem**: Compute number of ways to make change for amount.  
   **Outcome**: Print number of ways.  
   **Example**: Input: amount=5, coins=[1, 2, 5] → Output: 4

7. **Problem**: Find max sum of non-adjacent elements.  
   **Outcome**: Print max sum.  
   **Example**: Input: [5, 5, 10, 100, 10, 5] → Output: 110

8. **Problem**: Compute min path sum in a grid (right/down moves).  
   **Outcome**: Print min sum.  
   **Example**: Input: [[1,3,1],[1,5,1],[4,2,1]] → Output: 7

9. **Problem**: Compute factorial using tabulation.  
   **Outcome**: Print factorial.  
   **Example**: Input: 5 → Output: 120

10. **Problem**: Find longest common subsequence length.  
    **Outcome**: Print length.  
    **Example**: Input: "ABCD", "ACFD" → Output: 3