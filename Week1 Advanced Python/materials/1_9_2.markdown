# Week 1, Hour 9 Homework: Practice Problems

Practice these 10 programs to master advanced data structures. Write each as a .py file and verify outputs.

1. **Problem**: Count frequency of elements using `Counter`.  
   **Outcome**: Print frequency dictionary.  
   **Example**: Input: ['a', 'b', 'a'] → Output: {'a': 2, 'b': 1}

2. **Problem**: Implement queue using `deque`.  
   **Outcome**: Print queue after operations.  
   **Example**: Enqueue 1, 2; Dequeue → Output: [2]

3. **Problem**: Group strings by length using `defaultdict`.  
   **Outcome**: Print grouped dictionary.  
   **Example**: Input: ['cat', 'dog', 'rat'] → Output: {3: ['cat', 'dog', 'rat']}

4. **Problem**: Create `namedtuple` for student data.  
   **Outcome**: Print student attributes.  
   **Example**: Input: name="Alice", age=20 → Output: Alice, 20

5. **Problem**: Implement stack using `deque`.  
   **Outcome**: Print stack after push/pop.  
   **Example**: Push 1, 2; Pop → Output: [1]

6. **Problem**: Create `OrderedDict` from key-value pairs.  
   **Outcome**: Print ordered dictionary.  
   **Example**: Input: [('x', 1), ('y', 2)] → Output: OrderedDict([('x', 1), ('y', 2)])

7. **Problem**: Implement singly linked list append and delete.  
   **Outcome**: Print list after operations.  
   **Example**: Append 1, 2; Delete 1 → Output: [2]

8. **Problem**: Find most common element using `Counter`.  
   **Outcome**: Print most common.  
   **Example**: Input: [1, 2, 1, 3] → Output: (1, 2)

9. **Problem**: Rotate `deque` elements.  
   **Outcome**: Print rotated deque.  
   **Example**: Input: [1, 2, 3], rotate 1 → Output: [3, 1, 2]

10. **Problem**: Create custom doubly linked list.  
    **Outcome**: Print list after append.  
    **Example**: Append 1, 2 → Output: [1, 2]