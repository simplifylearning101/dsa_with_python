# Week 1, Hour 8 Quiz: 30 Questions

Covers Hour 8 and some Week 0/Hour 1-7 concepts.

1. What is a lambda function?  
2. Purpose of `map` function?  
3. Square [1, 2] using map. (Code)  
4. Output of `filter(lambda x: x > 2, [1, 2, 3, 4])`?  
5. What is `reduce`?  
6. True or False: Generators can be iterated multiple times.  
7. Compute sum with reduce. (Code)  
8. What is a list comprehension?  
9. Filter evens from range(6). (Code)  
10. Why use functional programming in interviews?  
11. Output of `(x * x for x in range(3))` after list conversion?  
12. Common generator error?  
13. Decorator to print function name. (Code)  
14. What is `yield`?  
15. True or False: Lambda functions can have multiple lines.  
16. Sort [(1, 2), (2, 1)] by first element. (Code)  
17. Why use generators?  
18. Filter strings <= 2 chars from ["a", "ab", "abc"]. (Code)  
19. Output of `reduce(lambda x, y: x + y, [1, 2, 3])`?  
20. Why test empty iterables?  
21. Generate first 3 Fibonacci numbers. (Code)  
22. What is a decorator?  
23. Map lambda x: x + 1 to [1, 2]. (Code)  
24. Why avoid complex lambdas?  
25. Output of `[x for x in range(4) if x % 2 == 0]`?  
26. Decorator to check string inputs. (Code)  
27. Why use list comprehensions?  
28. Generate squares of first 3 numbers. (Code)  
29. Output of `filter(lambda x: x % 2 == 0, [1, 2, 3, 4])`?  
30. When to use functional vs OOP?

## Solutions for the Quiz
1. Anonymous function defined with `lambda`.  
2. Applies function to each iterable element.  
3. `list(map(lambda x: x * x, [1, 2]))`  
4. [3, 4]  
5. Combines iterable into single value.  
6. False  
7. `from functools import reduce; reduce(lambda x, y: x + y, [1, 2, 3])`  
8. Concise way to create lists.  
9. `[x for x in range(6) if x % 2 == 0]`  
10. Shows Pythonic, concise code.  
11. [0, 1, 4]  
12. Exhausting generator.  
13. `def log(func): def wrapper(*args, **kwargs): print(func.__name__); return func(*args, **kwargs); return wrapper`  
14. Yields value from generator.  
15. False  
16. `sorted([(1, 2), (2, 1)], key=lambda x: x[0])`  
17. Memory efficiency for large data.  
18. `list(filter(lambda s: len(s) <= 2, ["a", "ab", "abc"]))`  
19. 6  
20. Ensures robust code.  
21. `def fib(n): a, b = 0, 1; for _ in range(n): yield a; a, b = b, a + b`  
22. Function that wraps another function.  
23. `list(map(lambda x: x + 1, [1, 2]))`  
24. Reduces readability.  
25. [0, 2]  
26. `def check_str(func): def wrapper(*args): for arg in args: if not isinstance(arg, str): raise ValueError("String input required"); return func(*args); return wrapper`  
27. Concise, Pythonic code.  
28. `(x * x for x in range(3))`  
29. [2, 4]  
30. Functional for transformations; OOP for stateful objects.