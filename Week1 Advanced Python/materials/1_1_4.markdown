# Week 1, Hour 1 Quiz: 30 Questions

Covers Hour 1 and some Week 0 concepts.

1. What does `list.sort()` do?  
2. Difference between `sort()` and `sorted()`?  
3. Write comprehension for numbers 1 to 5. (Code)  
4. Output of `[1, 2, 3][1:2]`?  
5. What does `extend()` do?  
6. True or False: Comprehensions are always faster.  
7. Reverse list [1, 2, 3]. (Code)  
8. What is negative indexing?  
9. Filter evens from [1, 2, 3, 4]. (Code)  
10. Why use `sorted()` in interviews?  
11. Output of `[0, 1, 2, 3][::2]`?  
12. Common error with list mutation?  
13. Sort [2, 1, 3] ascending. (Code)  
14. What does `[x for x in range(5)]` produce?  
15. True or False: Lists are immutable.  
16. Flatten [[1], [2]]. (Code)  
17. Why explain comprehensions in interviews?  
18. Add [3, 4] to [1, 2]. (Code)  
19. Output of `len([1, 2, 3])`?  
20. Sort ["b", "aa", "ccc"] by length. (Code)  
21. What is slicing step?  
22. Filter numbers < 3. (Code)  
23. Why avoid mutating during iteration?  
24. Output of `[1, 2, 3][-1]`?  
25. Create list of cubes. (Code)  
26. What does `reverse()` return?  
27. Remove duplicates from [1, 1, 2]. (Code)  
28. Why test empty lists?  
29. Output of `[1, 2, 3, 4][1:4:2]`?  
30. When to use loops over comprehensions?

## Solutions for the Quiz
1. Sorts list in-place.  
2. `sort()` modifies list; `sorted()` returns new list.  
3. `[x for x in range(1, 6)]`  
4. [2]  
5. Adds iterableâ€™s elements to list.  
6. False (depends on complexity).  
7. `[1, 2, 3][::-1]`  
8. Access from end (e.g., -1 is last).  
9. `[x for x in [1, 2, 3, 4] if x % 2 == 0]`  
10. Non-destructive, shows clarity.  
11. [0, 2]  
12. Modifying while iterating.  
13. `nums = [2, 1, 3]; nums.sort()`  
14. [0, 1, 2, 3, 4]  
15. False  
16. `[num for sublist in [[1], [2]] for num in sublist]`  
17. Shows Python fluency, clarity.  
18. `l = [1, 2]; l.extend([3, 4])`  
19. 3  
20. `words = ["b", "aa", "ccc"]; words.sort(key=len)`  
21. Increment in slicing (e.g., `[::2]`).  
22. `[x for x in [1, 2, 3, 4] if x < 3]`  
23. Causes unpredictable behavior.  
24. 3  
25. `[x**3 for x in range(n)]`  
26. None (in-place).  
27. `list(dict.fromkeys([1, 1, 2]))`  
28. Common edge case.  
29. [2, 4]  
30. Complex logic, readability.